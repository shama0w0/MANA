#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

// Incluye el mecanismo de manejo de errores de SQL
EXEC SQL INCLUDE sqlca;


// Declaracion de variables a usar en SQL
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR SQL_dbname[9];
   VARCHAR SQL_user[7];
   VARCHAR SQL_password[20];

   VARCHAR SQL_nombre[31];
   VARCHAR SQL_rut[11];
   VARCHAR SQL_fecha_n[31];
   VARCHAR SQL_sueldo[16];
   VARCHAR SQL_cargo[31];
   VARCHAR SQL_telefono[16];
   VARCHAR SQL_direccion[61];
   VARCHAR SQL_correo[61];
   VARCHAR SQL_estado[16];

   int SQL_count;

   EXEC SQL END DECLARE SECTION;

// Metodo para conectarse a la BdD
int SQLConectar() {

	strcpy(SQL_dbname.arr, "get");	
	SQL_dbname.len = strlen(SQL_dbname.arr);
	strcpy(SQL_user.arr, "sgonzalez");
	SQL_user.len = strlen(SQL_user.arr);	
	strcpy(SQL_password.arr, "dstdst");
	SQL_password.len = strlen(SQL_password.arr);

	EXEC SQL CONNECT TO :SQL_dbname USER :SQL_user IDENTIFIED BY :SQL_password;

  	if(sqlca.sqlcode != 0) {
    		printf("Error en la conexion con la base de datos\n\n");
    		return(0);
	} else {
    		printf("Conexion con base de datos realizada\n\n");
    		return(1);
	}
}// Fin SQLConectar()


int main() {

	printf("\n\n ++++++++++   Demonio en ejecucion   ++++++++++\n\n\n");
	printf("Conexion BdD:\n");
	
	SQLConectar();
	
	// Se definen variables y estructuras necesarias para la comunicacion entre el demonio y los .c

	int qid, pid , len;

	struct msgbuf
	{
		long mtype;
		struct
		{
			int pid;
			char datos[2000];
		} texto;
	} mensaje, respuesta;

	qid = msgget (5942016, IPC_CREAT|0666);
	pid = getpid ();

	while(1){

		//limpiamos la estructura de mensaje
		memset(&mensaje, 0, sizeof mensaje);
			
		//Limpiamos la estructura de respuesta
		memset (&respuesta, 0, sizeof respuesta);
		
		if((len = msgrcv (qid, &mensaje, 2500, 1, 0)) > 0) {

		  	memset (&respuesta, 0, sizeof respuesta);
		  	printf("Recibido: (%d) <%d/%s>\n\n", mensaje.mtype, mensaje.texto.pid, mensaje.texto.datos);
		  	int pid_destino = mensaje.texto.pid;
 
			// Fomulario del que viene

			char formulario[7];
			memset (formulario, 0, sizeof formulario);
			sscanf(mensaje.texto.datos, "%6c", formulario);
			printf("El formulario es: [%s]\n\n", formulario);


		/*************************************************************************
			Formulario Ingreso
		*************************************************************************/

			if (strcmp(formulario, "regemp")==0){
	
				printf("   --------------------   \n   El proceso Es: Formulario Ingreso\n   --------------------\n\n");
 				char nombre[30];
 				char rut[10];
 				char fecha_n[30];
 				char sueldo[15];
 				char cargo[30];
 				char telefono[15];
 				char direccion[60];
 				char correo[60];
 				char estado[15];
 
				//Limpiamos los Strings

				memset (nombre, 0, sizeof nombre);
				memset (rut, 0, sizeof rut);
				memset (fecha_n, 0, sizeof fecha_n);
				memset (sueldo, 0, sizeof sueldo);
				memset (cargo, 0, sizeof cargo);
				memset (telefono, 0, sizeof telefono);
				memset (direccion, 0, sizeof direccion);
				memset (correo, 0, sizeof correo);
				memset (estado, 0, sizeof estado);

				//Recibimos los datos desde el .c
	
				sscanf(mensaje.texto.datos, "%30c%10c%30c%15c%30c%15c%60c%60c%15c", nombre, rut, fecha_n, 
sueldo, cargo, telefono, direccion, correo, estado);

				//Guardamos la variable en la estructura arr de rut	

				sprintf(SQL_nombre.arr,"%s", nombre);
				SQL_nombre.len=strlen(SQL_nombre.arr);


				sprintf(SQL_rut.arr,"%s", rut);
				SQL_rut.len=strlen(SQL_rut.arr);


				sprintf(SQL_fecha_n.arr,"%s", fecha_n);
				SQL_fecha_n.len=strlen(SQL_fecha_n.arr);


				sprintf(SQL_sueldo.arr,"%s", sueldo);
				SQL_sueldo.len=strlen(SQL_sueldo.arr);

				sprintf(SQL_cargo.arr,"%s", cargo);
				SQL_cargo.len=strlen(SQL_cargo.arr);

				sprintf(SQL_telefono.arr,"%s", telefono);
				SQL_telefono.len=strlen(SQL_telefono.arr);


				sprintf(SQL_direccion.arr,"%s", direccion);
				SQL_direccion.len=strlen(SQL_direccion.arr);


				sprintf(SQL_correo.arr,"%s", correo);
				SQL_correo.len=strlen(SQL_correo.arr);


				sprintf(SQL_estado.arr,"%s", estado);
				SQL_estado.len=strlen(SQL_estado.arr);



				printf("El nombre es: %s\n", SQL_nombre.arr);
				printf("El rut es: %s\n", SQL_rut.arr);
				printf("El fecha_nacimiento es: %s\n", SQL_fecha_n.arr);
				printf("El sueldo es: %s\n", SQL_sueldo.arr);
				printf("El cargo es: %s\n", SQL_cargo.arr);
				printf("El telefono es: %s\n", SQL_telefono.arr);
				printf("El direccion es: %s\n", SQL_direccion.arr);
				printf("El correo es: %s\n", SQL_correo.arr);
				printf("El estado es: %s\n", SQL_estado.arr);

				// Verificamos si el empleado ya esta registrado
				EXEC SQL SELECT COUNT(*) INTO :SQL_count FROM EMPLEADOS WHERE RUT=:SQL_rut;

				if( SQL_count != 0) {
					
					printf("El empleado ya fue registrado\n");
					
					EXEC SQL SELECT nombre INTO :SQL_nombre FROM EMPLEADOS WHERE rut=:SQL_rut;
					EXEC SQL COMMIT;
					
					printf("Y sus datos son: Nombre: %s , Rut: %s \n\n", SQL_nombre.arr, SQL_rut);

					memset( &respuesta, 0, sizeof respuesta);
					sprintf(respuesta.texto.datos, "%s", "02");
					respuesta.mtype = pid_destino;
					respuesta.texto.pid = pid;
					msgsnd(qid, &respuesta, strlen(respuesta.texto.datos)+4,0);

				} else {


					// Insertamos el empleado en la BdD
					EXEC SQL INSERT INTO EMPLEADOS (nombre, rut, fecha_n, sueldo, cargo, telefono, direccion, correo, estado) VALUES (:SQL_nombre, :SQL_rut, :SQL_fecha_n, :SQL_sueldo, :SQL_cargo, :SQL_telefono, :SQL_direccion, :SQL_correo, :SQL_estado);
					EXEC SQL COMMIT;

					// Revisar en caso de error en la consulta
					if(sqlca.sqlcode != 0) {
						
						printf("\nERROR en la consulta SQL\n\n");

						memset(&respuesta,0,sizeof respuesta);
                                                sprintf(respuesta.texto.datos, "%s", "03");
                                                respuesta.mtype=pid_destino;
                                                respuesta.texto.pid=pid;
                                                msgsnd(qid,&respuesta,strlen(respuesta.texto.datos)+4,0);

					} else {			

						printf("\nEmpleado ingresado con exito\n\n");	
                            	
						memset(&respuesta,0,sizeof respuesta);
	                        		sprintf(respuesta.texto.datos, "%s", "01");
       	                        		respuesta.mtype=pid_destino;
                               	 		respuesta.texto.pid=pid;
                                		msgsnd(qid,&respuesta,strlen(respuesta.texto.datos)+4,0);

					}

				} // Fin else

			}//Fin Formulario ingtra

}
}
}


